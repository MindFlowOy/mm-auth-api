// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  /*
  * ---
  *   Routes module
  *   @name routes
  *   @api public
  */

  var Hapi, Passport, Types;

  Hapi = require('hapi');

  Types = require('hapi').types;

  Passport = void 0;

  module.exports = {
    setPassport: function(PassportInst) {
      return Passport = PassportInst;
    },
    routes: [
      {
        method: "GET",
        path: "/login",
        config: {
          auth: false,
          handler: function(request) {
            var form;
            if (request.session._isAuthenticated()) {
              return request.reply.redirect("/home");
            } else {
              form = "<p><a href=\"/auth/google\">Login with Google</a></p><form action=\"/login\" method=\"post\"> <div> <label>Username:</label> <input type=\"text\" name=\"username\"/> </div> <div> <label>Password:</label> <input type=\"password\" name=\"password\"/> </div> <div> <input type=\"submit\" value=\"Log In\"/> </div> </form>";
              return request.reply(form);
            }
          }
        }
      }, {
        method: "POST",
        path: "/login",
        config: {
          validate: {
            payload: {
              username: Hapi.types.String(),
              password: Hapi.types.String()
            }
          },
          auth: false,
          handler: function(request) {
            Passport.authenticate("local")(request, function() {});
            return request.reply({
              status: 200
            });
          }
        }
      }, {
        method: "POST",
        path: "/aa/session",
        config: {
          validate: {
            query: {},
            payload: {
              username: Hapi.types.String().required().description("username"),
              password: Hapi.types.String().required().description("password")
            }
          },
          auth: false,
          handler: function(request) {
            return Passport.authenticate("local")(request, function() {
              return request.reply({
                status: 200
              });
            });
          },
          description: "Create",
          notes: "Logs user in and creates session.",
          tags: ["api"]
        }
      }, {
        method: "GET",
        path: "/aa/session",
        config: {
          auth: false,
          handler: function(request) {
            request.reply(request.session);
            return request.session;
          },
          description: "Show",
          notes: "Shows current request session",
          tags: ["api"]
        }
      }, {
        method: "PUT",
        path: "/aa/session",
        config: {
          auth: false,
          handler: function(request) {
            console.log("CLEAR SESSION");
            request.session._logout();
            request.session.reset();
            return request.reply({
              status: 200
            });
          },
          description: "Reset",
          notes: "Reset (delete) current request session",
          tags: ["api"]
        }
      }, {
        method: "DELETE",
        path: "/aa/session",
        config: {
          auth: false,
          handler: function(request) {
            request.session._logout();
            return request.reply({
              status: 200
            });
          },
          description: "Remove",
          notes: "Removes current request session (=log out)",
          tags: ["api"]
        }
      }, {
        method: "GET",
        path: "/auth/google",
        config: {
          auth: false,
          handler: function(request) {
            return Passport.authenticate("google")(request);
          }
        }
      }, {
        method: "GET",
        path: "/auth/google/return",
        config: {
          auth: false,
          handler: function(request) {
            return Passport.authenticate("google", {
              failureRedirect: options.urls.failureRedirect,
              successRedirect: options.urls.successRedirect,
              failureFlash: true
            })(request, function(err) {
              if (err && err.isBoom) {
                request.session.error = err;
              }
              return request.reply.redirect("/");
            });
          }
        }
      }
    ]
  };

}).call(this);
