// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  /*
  * ---
  *   Auth Index
  *   @name index
  *   @api public
  */

  var GoogleStrategy, Hapi, LocalStrategy, USERS, routes;

  Hapi = require("hapi");

  LocalStrategy = require("passport-local").Strategy;

  GoogleStrategy = require("passport-google").Strategy;

  routes = require('./routes');

  USERS = {
    MindFlow: "test"
  };

  exports.register = function(plugin, options, next) {
    var Passport, route, _i, _len, _ref;
    Passport = options.passport;
    Passport.use(new LocalStrategy(function(username, password, done) {
      if (USERS.hasOwnProperty(username) && USERS[username] === password) {
        return done(null, {
          username: username
        });
      }
      return done(null, false, {
        message: "invalid credentials"
      });
    }));
    Passport.use(new GoogleStrategy(options.google, function(identifier, profile, done) {
      console.log("GOOGLE accessToken", identifier);
      console.log("GOOGLE profile", profile);
      return done(null, profile);
    }));
    Passport.serializeUser(function(user, done) {
      return done(null, user);
    });
    Passport.deserializeUser(function(obj, done) {
      return done(null, obj);
    });
    routes.setPassport(Passport);
    _ref = routes.routes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      route = _ref[_i];
      plugin.route(route);
    }
    return next();
  };

}).call(this);
